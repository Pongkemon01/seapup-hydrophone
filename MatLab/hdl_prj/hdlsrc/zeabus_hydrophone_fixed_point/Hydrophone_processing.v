// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\zeabus_hydrophone_fixed_point\Hydrophone_processing.v
// Created: 2020-04-16 11:11:01
// 
// Generated by MATLAB 9.7 and HDL Coder 3.15
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1.5625e-08
// Target subsystem base rate: 1.5625e-08
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out_1      1e-06
// ce_out_0      5e-06
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Ch1_I_Out                     ce_out_0      5e-06
// Ch1_Q_Out                     ce_out_0      5e-06
// Ch2_I_Out                     ce_out_0      5e-06
// Ch2_Q_out                     ce_out_0      5e-06
// Ch3_I_Out                     ce_out_0      5e-06
// Ch3_Q_Out                     ce_out_0      5e-06
// Ch4_I_Out                     ce_out_0      5e-06
// Ch4_Q_Out                     ce_out_0      5e-06
// Trigged                       ce_out_1      1e-06
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Hydrophone_processing
// Source Path: zeabus_hydrophone_fixed_point/Hydrophone processing
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 10 ns / 10 ns

module Hydrophone_processing
          (clk,
           reset,
           clk_enable,
           ADC1_In,
           ADC2_In,
           ADC3_In,
           ADC4_In,
           Threshold,
           Q_Carrier,
           I_Carrier,
           ce_out_0,
           ce_out_1,
           Ch1_I_Out,
           Ch1_Q_Out,
           Ch2_I_Out,
           Ch2_Q_out,
           Ch3_I_Out,
           Ch3_Q_Out,
           Ch4_I_Out,
           Ch4_Q_Out,
           Trigged);


  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [17:0] ADC1_In;  // sfix18_En17
  input   signed [17:0] ADC2_In;  // sfix18_En17
  input   signed [17:0] ADC3_In;  // sfix18_En17
  input   signed [17:0] ADC4_In;  // sfix18_En17
  input   [15:0] Threshold;  // ufix16_En16
  input   signed [17:0] Q_Carrier;  // sfix18_En16
  input   signed [17:0] I_Carrier;  // sfix18_En16
  output  ce_out_0;
  output  ce_out_1;
  output  signed [15:0] Ch1_I_Out;  // sfix16_En15
  output  signed [15:0] Ch1_Q_Out;  // sfix16_En15
  output  signed [15:0] Ch2_I_Out;  // sfix16_En15
  output  signed [15:0] Ch2_Q_out;  // sfix16_En15
  output  signed [15:0] Ch3_I_Out;  // sfix16_En15
  output  signed [15:0] Ch3_Q_Out;  // sfix16_En15
  output  signed [15:0] Ch4_I_Out;  // sfix16_En15
  output  signed [15:0] Ch4_Q_Out;  // sfix16_En15
  output  [7:0] Trigged;  // uint8


  wire enb_1_64_0;
  wire enb_1_320_1;
  wire enb_1_320_0;
  wire enb;
  wire enb_1_64_1;
  wire signed [17:0] ADC1_Interface_out1;  // sfix18_En17
  wire signed [17:0] ADC2_Interface_out1;  // sfix18_En17
  wire signed [17:0] ADC3_Interface_out1;  // sfix18_En17
  wire signed [17:0] ADC4_Interface_out1;  // sfix18_En17
  wire signed [17:0] Trigger_out1;  // sfix18_En17
  wire signed [17:0] Trigger_out2;  // sfix18_En17
  wire signed [17:0] Trigger_out3;  // sfix18_En17
  wire signed [17:0] Trigger_out4;  // sfix18_En17
  wire [7:0] Trigger_out5;  // uint8
  reg signed [17:0] Q_Carrier_1;  // sfix18_En16
  reg signed [17:0] I_Carrier_1;  // sfix18_En16
  wire signed [17:0] I_Out;  // sfix18_En17
  wire signed [17:0] Q_Out;  // sfix18_En17
  reg signed [17:0] delayMatch2_reg [0:3];  // sfix18 [4]
  wire signed [17:0] delayMatch2_reg_next [0:3];  // sfix18_En17 [4]
  wire signed [17:0] I_Out_1;  // sfix18_En17
  reg signed [17:0] Downsample_out1;  // sfix18_En17
  reg signed [17:0] Downsample_out1_1;  // sfix18_En17
  reg signed [17:0] delayMatch3_reg [0:3];  // sfix18 [4]
  wire signed [17:0] delayMatch3_reg_next [0:3];  // sfix18_En17 [4]
  wire signed [17:0] Q_Out_1;  // sfix18_En17
  reg signed [17:0] Downsample1_out1;  // sfix18_En17
  reg signed [17:0] Downsample1_out1_1;  // sfix18_En17
  wire signed [17:0] I_Out_2;  // sfix18_En17
  wire signed [17:0] Q_Out_2;  // sfix18_En17
  reg signed [17:0] delayMatch6_reg [0:3];  // sfix18 [4]
  wire signed [17:0] delayMatch6_reg_next [0:3];  // sfix18_En17 [4]
  wire signed [17:0] I_Out_3;  // sfix18_En17
  reg signed [17:0] Downsmple2_out1;  // sfix18_En17
  reg signed [17:0] Downsmple2_out1_1;  // sfix18_En17
  reg signed [17:0] delayMatch7_reg [0:3];  // sfix18 [4]
  wire signed [17:0] delayMatch7_reg_next [0:3];  // sfix18_En17 [4]
  wire signed [17:0] Q_Out_3;  // sfix18_En17
  reg signed [17:0] Downsample3_out1;  // sfix18_En17
  reg signed [17:0] Downsample3_out1_1;  // sfix18_En17
  wire signed [17:0] I_Out_4;  // sfix18_En17
  wire signed [17:0] Q_Out_4;  // sfix18_En17
  reg signed [17:0] delayMatch10_reg [0:3];  // sfix18 [4]
  wire signed [17:0] delayMatch10_reg_next [0:3];  // sfix18_En17 [4]
  wire signed [17:0] I_Out_5;  // sfix18_En17
  reg signed [17:0] Downsample2_out1;  // sfix18_En17
  reg signed [17:0] Downsample2_out1_1;  // sfix18_En17
  reg signed [17:0] delayMatch11_reg [0:3];  // sfix18 [4]
  wire signed [17:0] delayMatch11_reg_next [0:3];  // sfix18_En17 [4]
  wire signed [17:0] Q_Out_5;  // sfix18_En17
  reg signed [17:0] Downsample4_out1;  // sfix18_En17
  reg signed [17:0] Downsample4_out1_1;  // sfix18_En17
  wire signed [17:0] I_Out_6;  // sfix18_En17
  wire signed [17:0] Q_Out_6;  // sfix18_En17
  reg signed [17:0] delayMatch14_reg [0:3];  // sfix18 [4]
  wire signed [17:0] delayMatch14_reg_next [0:3];  // sfix18_En17 [4]
  wire signed [17:0] I_Out_7;  // sfix18_En17
  reg signed [17:0] Downsample6_out1;  // sfix18_En17
  reg signed [17:0] Downsample6_out1_1;  // sfix18_En17
  reg signed [17:0] delayMatch15_reg [0:3];  // sfix18 [4]
  wire signed [17:0] delayMatch15_reg_next [0:3];  // sfix18_En17 [4]
  wire signed [17:0] Q_Out_7;  // sfix18_En17
  reg signed [17:0] Downsample5_out1;  // sfix18_En17
  reg signed [17:0] Downsample5_out1_1;  // sfix18_En17
  reg [7:0] delayMatch16_reg [0:13];  // ufix8 [14]
  wire [7:0] delayMatch16_reg_next [0:13];  // ufix8 [14]
  wire [7:0] Trigger_out5_1;  // uint8

  // Cut-off frequency must be greater
  // than 0.01 times of sampling rate


  Hydrophone_processing_tc u_Hydrophone_processing_tc (.clk(clk),
                                                       .reset(reset),
                                                       .clk_enable(clk_enable),
                                                       .enb(enb),
                                                       .enb_1_64_0(enb_1_64_0),
                                                       .enb_1_64_1(enb_1_64_1),
                                                       .enb_1_320_0(enb_1_320_0),
                                                       .enb_1_320_1(enb_1_320_1)
                                                       );

  ADC1_Interface u_ADC1_Interface (.clk(clk),
                                   .reset(reset),
                                   .enb_1_64_0(enb_1_64_0),
                                   .enb(enb),
                                   .enb_1_64_1(enb_1_64_1),
                                   .In1(ADC1_In),  // sfix18_En17
                                   .Out1(ADC1_Interface_out1)  // sfix18_En17
                                   );

  ADC2_Interface u_ADC2_Interface (.clk(clk),
                                   .reset(reset),
                                   .enb_1_64_0(enb_1_64_0),
                                   .enb(enb),
                                   .enb_1_64_1(enb_1_64_1),
                                   .In1(ADC2_In),  // sfix18_En17
                                   .Out1(ADC2_Interface_out1)  // sfix18_En17
                                   );

  ADC3_Interface u_ADC3_Interface (.clk(clk),
                                   .reset(reset),
                                   .enb_1_64_0(enb_1_64_0),
                                   .enb(enb),
                                   .enb_1_64_1(enb_1_64_1),
                                   .In1(ADC3_In),  // sfix18_En17
                                   .Out1(ADC3_Interface_out1)  // sfix18_En17
                                   );

  ADC4_Interface u_ADC4_Interface (.clk(clk),
                                   .reset(reset),
                                   .enb_1_64_0(enb_1_64_0),
                                   .enb(enb),
                                   .enb_1_64_1(enb_1_64_1),
                                   .In1(ADC4_In),  // sfix18_En17
                                   .Out1(ADC4_Interface_out1)  // sfix18_En17
                                   );

  Trigger u_Trigger (.clk(clk),
                     .reset(reset),
                     .enb_1_64_0(enb_1_64_0),
                     .i1(ADC1_Interface_out1),  // sfix18_En17
                     .i2(ADC2_Interface_out1),  // sfix18_En17
                     .i3(ADC3_Interface_out1),  // sfix18_En17
                     .i4(ADC4_Interface_out1),  // sfix18_En17
                     .threshold(Threshold),  // ufix16_En16
                     .o1(Trigger_out1),  // sfix18_En17
                     .o2(Trigger_out2),  // sfix18_En17
                     .o3(Trigger_out3),  // sfix18_En17
                     .o4(Trigger_out4),  // sfix18_En17
                     .trigged(Trigger_out5)  // uint8
                     );

  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        Q_Carrier_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_64_0) begin
          Q_Carrier_1 <= Q_Carrier;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_1_process
      if (reset == 1'b1) begin
        I_Carrier_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_64_0) begin
          I_Carrier_1 <= I_Carrier;
        end
      end
    end



  IQ_Demod1 u_IQ_Demod1 (.Signal_In(Trigger_out1),  // sfix18_En17
                         .Sin_Carrier_In(Q_Carrier_1),  // sfix18_En16
                         .Cos_Carrier_In(I_Carrier_1),  // sfix18_En16
                         .I_Out(I_Out),  // sfix18_En17
                         .Q_Out(Q_Out)  // sfix18_En17
                         );

  always @(posedge clk)
    begin : delayMatch2_process
      if (reset == 1'b1) begin
        delayMatch2_reg[0] <= 18'sb000000000000000000;
        delayMatch2_reg[1] <= 18'sb000000000000000000;
        delayMatch2_reg[2] <= 18'sb000000000000000000;
        delayMatch2_reg[3] <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_64_0) begin
          delayMatch2_reg[0] <= delayMatch2_reg_next[0];
          delayMatch2_reg[1] <= delayMatch2_reg_next[1];
          delayMatch2_reg[2] <= delayMatch2_reg_next[2];
          delayMatch2_reg[3] <= delayMatch2_reg_next[3];
        end
      end
    end

  assign I_Out_1 = delayMatch2_reg[3];
  assign delayMatch2_reg_next[0] = I_Out;
  assign delayMatch2_reg_next[1] = delayMatch2_reg[0];
  assign delayMatch2_reg_next[2] = delayMatch2_reg[1];
  assign delayMatch2_reg_next[3] = delayMatch2_reg[2];



  // Downsample by 5 register (Sample offset 0)
  always @(posedge clk)
    begin : Downsample_output_process
      if (reset == 1'b1) begin
        Downsample_out1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_320_1) begin
          Downsample_out1 <= I_Out_1;
        end
      end
    end



  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Downsample_out1_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_320_0) begin
          Downsample_out1_1 <= Downsample_out1;
        end
      end
    end



  always @(posedge clk)
    begin : delayMatch3_process
      if (reset == 1'b1) begin
        delayMatch3_reg[0] <= 18'sb000000000000000000;
        delayMatch3_reg[1] <= 18'sb000000000000000000;
        delayMatch3_reg[2] <= 18'sb000000000000000000;
        delayMatch3_reg[3] <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_64_0) begin
          delayMatch3_reg[0] <= delayMatch3_reg_next[0];
          delayMatch3_reg[1] <= delayMatch3_reg_next[1];
          delayMatch3_reg[2] <= delayMatch3_reg_next[2];
          delayMatch3_reg[3] <= delayMatch3_reg_next[3];
        end
      end
    end

  assign Q_Out_1 = delayMatch3_reg[3];
  assign delayMatch3_reg_next[0] = Q_Out;
  assign delayMatch3_reg_next[1] = delayMatch3_reg[0];
  assign delayMatch3_reg_next[2] = delayMatch3_reg[1];
  assign delayMatch3_reg_next[3] = delayMatch3_reg[2];



  // Downsample by 5 register (Sample offset 0)
  always @(posedge clk)
    begin : Downsample1_output_process
      if (reset == 1'b1) begin
        Downsample1_out1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_320_1) begin
          Downsample1_out1 <= Q_Out_1;
        end
      end
    end



  always @(posedge clk)
    begin : PipelineRegister1_process
      if (reset == 1'b1) begin
        Downsample1_out1_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_320_0) begin
          Downsample1_out1_1 <= Downsample1_out1;
        end
      end
    end



  Channel1_Filter u_Channel1_Filter (.clk(clk),
                                     .reset(reset),
                                     .enb_1_320_1(enb_1_320_1),
                                     .enb_1_320_0(enb_1_320_0),
                                     .enb(enb),
                                     .I_in(Downsample_out1_1),  // sfix18_En17
                                     .Q_in(Downsample1_out1_1),  // sfix18_En17
                                     .I_out(Ch1_I_Out),  // sfix16_En15
                                     .Q_out(Ch1_Q_Out)  // sfix16_En15
                                     );

  IQ_Demod2 u_IQ_Demod2 (.Signal_In(Trigger_out2),  // sfix18_En17
                         .Sin_Carrier_In(Q_Carrier_1),  // sfix18_En16
                         .Cos_Carrier_In(I_Carrier_1),  // sfix18_En16
                         .I_Out(I_Out_2),  // sfix18_En17
                         .Q_Out(Q_Out_2)  // sfix18_En17
                         );

  always @(posedge clk)
    begin : delayMatch6_process
      if (reset == 1'b1) begin
        delayMatch6_reg[0] <= 18'sb000000000000000000;
        delayMatch6_reg[1] <= 18'sb000000000000000000;
        delayMatch6_reg[2] <= 18'sb000000000000000000;
        delayMatch6_reg[3] <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_64_0) begin
          delayMatch6_reg[0] <= delayMatch6_reg_next[0];
          delayMatch6_reg[1] <= delayMatch6_reg_next[1];
          delayMatch6_reg[2] <= delayMatch6_reg_next[2];
          delayMatch6_reg[3] <= delayMatch6_reg_next[3];
        end
      end
    end

  assign I_Out_3 = delayMatch6_reg[3];
  assign delayMatch6_reg_next[0] = I_Out_2;
  assign delayMatch6_reg_next[1] = delayMatch6_reg[0];
  assign delayMatch6_reg_next[2] = delayMatch6_reg[1];
  assign delayMatch6_reg_next[3] = delayMatch6_reg[2];



  // Downsample by 5 register (Sample offset 0)
  always @(posedge clk)
    begin : Downsmple2_output_process
      if (reset == 1'b1) begin
        Downsmple2_out1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_320_1) begin
          Downsmple2_out1 <= I_Out_3;
        end
      end
    end



  always @(posedge clk)
    begin : PipelineRegister7_process
      if (reset == 1'b1) begin
        Downsmple2_out1_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_320_0) begin
          Downsmple2_out1_1 <= Downsmple2_out1;
        end
      end
    end



  always @(posedge clk)
    begin : delayMatch7_process
      if (reset == 1'b1) begin
        delayMatch7_reg[0] <= 18'sb000000000000000000;
        delayMatch7_reg[1] <= 18'sb000000000000000000;
        delayMatch7_reg[2] <= 18'sb000000000000000000;
        delayMatch7_reg[3] <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_64_0) begin
          delayMatch7_reg[0] <= delayMatch7_reg_next[0];
          delayMatch7_reg[1] <= delayMatch7_reg_next[1];
          delayMatch7_reg[2] <= delayMatch7_reg_next[2];
          delayMatch7_reg[3] <= delayMatch7_reg_next[3];
        end
      end
    end

  assign Q_Out_3 = delayMatch7_reg[3];
  assign delayMatch7_reg_next[0] = Q_Out_2;
  assign delayMatch7_reg_next[1] = delayMatch7_reg[0];
  assign delayMatch7_reg_next[2] = delayMatch7_reg[1];
  assign delayMatch7_reg_next[3] = delayMatch7_reg[2];



  // Downsample by 5 register (Sample offset 0)
  always @(posedge clk)
    begin : Downsample3_output_process
      if (reset == 1'b1) begin
        Downsample3_out1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_320_1) begin
          Downsample3_out1 <= Q_Out_3;
        end
      end
    end



  always @(posedge clk)
    begin : PipelineRegister3_process
      if (reset == 1'b1) begin
        Downsample3_out1_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_320_0) begin
          Downsample3_out1_1 <= Downsample3_out1;
        end
      end
    end



  Channel2_Filter u_Channel2_Filter (.clk(clk),
                                     .reset(reset),
                                     .enb_1_320_1(enb_1_320_1),
                                     .enb_1_320_0(enb_1_320_0),
                                     .enb(enb),
                                     .I_in(Downsmple2_out1_1),  // sfix18_En17
                                     .Q_in(Downsample3_out1_1),  // sfix18_En17
                                     .I_out(Ch2_I_Out),  // sfix16_En15
                                     .Q_out(Ch2_Q_out)  // sfix16_En15
                                     );

  IQ_Demod3 u_IQ_Demod3 (.Signal_In(Trigger_out3),  // sfix18_En17
                         .Sin_Carrier_In(Q_Carrier_1),  // sfix18_En16
                         .Cos_Carrier_In(I_Carrier_1),  // sfix18_En16
                         .I_Out(I_Out_4),  // sfix18_En17
                         .Q_Out(Q_Out_4)  // sfix18_En17
                         );

  always @(posedge clk)
    begin : delayMatch10_process
      if (reset == 1'b1) begin
        delayMatch10_reg[0] <= 18'sb000000000000000000;
        delayMatch10_reg[1] <= 18'sb000000000000000000;
        delayMatch10_reg[2] <= 18'sb000000000000000000;
        delayMatch10_reg[3] <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_64_0) begin
          delayMatch10_reg[0] <= delayMatch10_reg_next[0];
          delayMatch10_reg[1] <= delayMatch10_reg_next[1];
          delayMatch10_reg[2] <= delayMatch10_reg_next[2];
          delayMatch10_reg[3] <= delayMatch10_reg_next[3];
        end
      end
    end

  assign I_Out_5 = delayMatch10_reg[3];
  assign delayMatch10_reg_next[0] = I_Out_4;
  assign delayMatch10_reg_next[1] = delayMatch10_reg[0];
  assign delayMatch10_reg_next[2] = delayMatch10_reg[1];
  assign delayMatch10_reg_next[3] = delayMatch10_reg[2];



  // Downsample by 5 register (Sample offset 0)
  always @(posedge clk)
    begin : Downsample2_output_process
      if (reset == 1'b1) begin
        Downsample2_out1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_320_1) begin
          Downsample2_out1 <= I_Out_5;
        end
      end
    end



  always @(posedge clk)
    begin : PipelineRegister2_process
      if (reset == 1'b1) begin
        Downsample2_out1_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_320_0) begin
          Downsample2_out1_1 <= Downsample2_out1;
        end
      end
    end



  always @(posedge clk)
    begin : delayMatch11_process
      if (reset == 1'b1) begin
        delayMatch11_reg[0] <= 18'sb000000000000000000;
        delayMatch11_reg[1] <= 18'sb000000000000000000;
        delayMatch11_reg[2] <= 18'sb000000000000000000;
        delayMatch11_reg[3] <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_64_0) begin
          delayMatch11_reg[0] <= delayMatch11_reg_next[0];
          delayMatch11_reg[1] <= delayMatch11_reg_next[1];
          delayMatch11_reg[2] <= delayMatch11_reg_next[2];
          delayMatch11_reg[3] <= delayMatch11_reg_next[3];
        end
      end
    end

  assign Q_Out_5 = delayMatch11_reg[3];
  assign delayMatch11_reg_next[0] = Q_Out_4;
  assign delayMatch11_reg_next[1] = delayMatch11_reg[0];
  assign delayMatch11_reg_next[2] = delayMatch11_reg[1];
  assign delayMatch11_reg_next[3] = delayMatch11_reg[2];



  // Downsample by 5 register (Sample offset 0)
  always @(posedge clk)
    begin : Downsample4_output_process
      if (reset == 1'b1) begin
        Downsample4_out1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_320_1) begin
          Downsample4_out1 <= Q_Out_5;
        end
      end
    end



  always @(posedge clk)
    begin : PipelineRegister4_process
      if (reset == 1'b1) begin
        Downsample4_out1_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_320_0) begin
          Downsample4_out1_1 <= Downsample4_out1;
        end
      end
    end



  Channel3_Filter u_Channel3_Filter (.clk(clk),
                                     .reset(reset),
                                     .enb_1_320_1(enb_1_320_1),
                                     .enb_1_320_0(enb_1_320_0),
                                     .enb(enb),
                                     .I_in(Downsample2_out1_1),  // sfix18_En17
                                     .Q_in(Downsample4_out1_1),  // sfix18_En17
                                     .I_out(Ch3_I_Out),  // sfix16_En15
                                     .Q_out(Ch3_Q_Out)  // sfix16_En15
                                     );

  IQ_Demod4 u_IQ_Demod4 (.Signal_In(Trigger_out4),  // sfix18_En17
                         .Sin_Carrier_In(Q_Carrier_1),  // sfix18_En16
                         .Cos_Carrier_In(I_Carrier_1),  // sfix18_En16
                         .I_Out(I_Out_6),  // sfix18_En17
                         .Q_Out(Q_Out_6)  // sfix18_En17
                         );

  always @(posedge clk)
    begin : delayMatch14_process
      if (reset == 1'b1) begin
        delayMatch14_reg[0] <= 18'sb000000000000000000;
        delayMatch14_reg[1] <= 18'sb000000000000000000;
        delayMatch14_reg[2] <= 18'sb000000000000000000;
        delayMatch14_reg[3] <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_64_0) begin
          delayMatch14_reg[0] <= delayMatch14_reg_next[0];
          delayMatch14_reg[1] <= delayMatch14_reg_next[1];
          delayMatch14_reg[2] <= delayMatch14_reg_next[2];
          delayMatch14_reg[3] <= delayMatch14_reg_next[3];
        end
      end
    end

  assign I_Out_7 = delayMatch14_reg[3];
  assign delayMatch14_reg_next[0] = I_Out_6;
  assign delayMatch14_reg_next[1] = delayMatch14_reg[0];
  assign delayMatch14_reg_next[2] = delayMatch14_reg[1];
  assign delayMatch14_reg_next[3] = delayMatch14_reg[2];



  // Downsample by 5 register (Sample offset 0)
  always @(posedge clk)
    begin : Downsample6_output_process
      if (reset == 1'b1) begin
        Downsample6_out1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_320_1) begin
          Downsample6_out1 <= I_Out_7;
        end
      end
    end



  always @(posedge clk)
    begin : PipelineRegister6_process
      if (reset == 1'b1) begin
        Downsample6_out1_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_320_0) begin
          Downsample6_out1_1 <= Downsample6_out1;
        end
      end
    end



  always @(posedge clk)
    begin : delayMatch15_process
      if (reset == 1'b1) begin
        delayMatch15_reg[0] <= 18'sb000000000000000000;
        delayMatch15_reg[1] <= 18'sb000000000000000000;
        delayMatch15_reg[2] <= 18'sb000000000000000000;
        delayMatch15_reg[3] <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_64_0) begin
          delayMatch15_reg[0] <= delayMatch15_reg_next[0];
          delayMatch15_reg[1] <= delayMatch15_reg_next[1];
          delayMatch15_reg[2] <= delayMatch15_reg_next[2];
          delayMatch15_reg[3] <= delayMatch15_reg_next[3];
        end
      end
    end

  assign Q_Out_7 = delayMatch15_reg[3];
  assign delayMatch15_reg_next[0] = Q_Out_6;
  assign delayMatch15_reg_next[1] = delayMatch15_reg[0];
  assign delayMatch15_reg_next[2] = delayMatch15_reg[1];
  assign delayMatch15_reg_next[3] = delayMatch15_reg[2];



  // Downsample by 5 register (Sample offset 0)
  always @(posedge clk)
    begin : Downsample5_output_process
      if (reset == 1'b1) begin
        Downsample5_out1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_320_1) begin
          Downsample5_out1 <= Q_Out_7;
        end
      end
    end



  always @(posedge clk)
    begin : PipelineRegister5_process
      if (reset == 1'b1) begin
        Downsample5_out1_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_320_0) begin
          Downsample5_out1_1 <= Downsample5_out1;
        end
      end
    end



  Channel4_Filter u_Channel4_Filter (.clk(clk),
                                     .reset(reset),
                                     .enb_1_320_1(enb_1_320_1),
                                     .enb_1_320_0(enb_1_320_0),
                                     .enb(enb),
                                     .I_in(Downsample6_out1_1),  // sfix18_En17
                                     .Q_in(Downsample5_out1_1),  // sfix18_En17
                                     .I_out(Ch4_I_Out),  // sfix16_En15
                                     .Q_out(Ch4_Q_Out)  // sfix16_En15
                                     );

  always @(posedge clk)
    begin : delayMatch16_process
      if (reset == 1'b1) begin
        delayMatch16_reg[0] <= 8'b00000000;
        delayMatch16_reg[1] <= 8'b00000000;
        delayMatch16_reg[2] <= 8'b00000000;
        delayMatch16_reg[3] <= 8'b00000000;
        delayMatch16_reg[4] <= 8'b00000000;
        delayMatch16_reg[5] <= 8'b00000000;
        delayMatch16_reg[6] <= 8'b00000000;
        delayMatch16_reg[7] <= 8'b00000000;
        delayMatch16_reg[8] <= 8'b00000000;
        delayMatch16_reg[9] <= 8'b00000000;
        delayMatch16_reg[10] <= 8'b00000000;
        delayMatch16_reg[11] <= 8'b00000000;
        delayMatch16_reg[12] <= 8'b00000000;
        delayMatch16_reg[13] <= 8'b00000000;
      end
      else begin
        if (enb_1_64_0) begin
          delayMatch16_reg[0] <= delayMatch16_reg_next[0];
          delayMatch16_reg[1] <= delayMatch16_reg_next[1];
          delayMatch16_reg[2] <= delayMatch16_reg_next[2];
          delayMatch16_reg[3] <= delayMatch16_reg_next[3];
          delayMatch16_reg[4] <= delayMatch16_reg_next[4];
          delayMatch16_reg[5] <= delayMatch16_reg_next[5];
          delayMatch16_reg[6] <= delayMatch16_reg_next[6];
          delayMatch16_reg[7] <= delayMatch16_reg_next[7];
          delayMatch16_reg[8] <= delayMatch16_reg_next[8];
          delayMatch16_reg[9] <= delayMatch16_reg_next[9];
          delayMatch16_reg[10] <= delayMatch16_reg_next[10];
          delayMatch16_reg[11] <= delayMatch16_reg_next[11];
          delayMatch16_reg[12] <= delayMatch16_reg_next[12];
          delayMatch16_reg[13] <= delayMatch16_reg_next[13];
        end
      end
    end

  assign Trigger_out5_1 = delayMatch16_reg[13];
  assign delayMatch16_reg_next[0] = Trigger_out5;
  assign delayMatch16_reg_next[1] = delayMatch16_reg[0];
  assign delayMatch16_reg_next[2] = delayMatch16_reg[1];
  assign delayMatch16_reg_next[3] = delayMatch16_reg[2];
  assign delayMatch16_reg_next[4] = delayMatch16_reg[3];
  assign delayMatch16_reg_next[5] = delayMatch16_reg[4];
  assign delayMatch16_reg_next[6] = delayMatch16_reg[5];
  assign delayMatch16_reg_next[7] = delayMatch16_reg[6];
  assign delayMatch16_reg_next[8] = delayMatch16_reg[7];
  assign delayMatch16_reg_next[9] = delayMatch16_reg[8];
  assign delayMatch16_reg_next[10] = delayMatch16_reg[9];
  assign delayMatch16_reg_next[11] = delayMatch16_reg[10];
  assign delayMatch16_reg_next[12] = delayMatch16_reg[11];
  assign delayMatch16_reg_next[13] = delayMatch16_reg[12];



  assign Trigged = Trigger_out5_1;

  assign ce_out_0 = enb_1_320_1;

  assign ce_out_1 = enb_1_64_1;

endmodule  // Hydrophone_processing

