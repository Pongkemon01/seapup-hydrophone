// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\zeabus_hydrophone_fixed_point\Hydrophone_processing_tb.v
// Created: 2020-04-16 11:11:39
// 
// Generated by MATLAB 9.7 and HDL Coder 3.15
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1.5625e-08
// Target subsystem base rate: 1.5625e-08
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out_1      1e-06
// ce_out_0      5e-06
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Ch1_I_Out                     ce_out_0      5e-06
// Ch1_Q_Out                     ce_out_0      5e-06
// Ch2_I_Out                     ce_out_0      5e-06
// Ch2_Q_out                     ce_out_0      5e-06
// Ch3_I_Out                     ce_out_0      5e-06
// Ch3_Q_Out                     ce_out_0      5e-06
// Ch4_I_Out                     ce_out_0      5e-06
// Ch4_Q_Out                     ce_out_0      5e-06
// Trigged                       ce_out_1      1e-06
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Hydrophone_processing_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 10 ns / 10 ns

module Hydrophone_processing_tb;



  reg  clk;
  reg  reset;
  wire clk_enable;
  wire [15:0] rawData_Threshold;  // ufix16_En16
  wire Trigged_done;  // ufix1
  wire ce_out_1;
  wire Trigged_done_enb;  // ufix1
  reg [9:0] Trigged_addr;  // ufix10
  wire Trigged_active;  // ufix1
  wire Trigged_enb;  // ufix1
  wire Trigged_lastAddr;  // ufix1
  wire resetn;
  reg  check9_done;  // ufix1
  wire Ch4_Q_Out_done;  // ufix1
  wire ce_out_0;
  wire Ch4_Q_Out_done_enb;  // ufix1
  reg [7:0] Ch1_I_Out_addr;  // ufix8
  wire Ch4_Q_Out_lastAddr;  // ufix1
  reg  check8_done;  // ufix1
  wire Ch4_I_Out_done;  // ufix1
  wire Ch4_I_Out_done_enb;  // ufix1
  wire Ch4_I_Out_lastAddr;  // ufix1
  reg  check7_done;  // ufix1
  wire Ch3_Q_Out_done;  // ufix1
  wire Ch3_Q_Out_done_enb;  // ufix1
  wire Ch3_Q_Out_lastAddr;  // ufix1
  reg  check6_done;  // ufix1
  wire Ch3_I_Out_done;  // ufix1
  wire Ch3_I_Out_done_enb;  // ufix1
  wire Ch3_I_Out_lastAddr;  // ufix1
  reg  check5_done;  // ufix1
  wire Ch2_Q_out_done;  // ufix1
  wire Ch2_Q_out_done_enb;  // ufix1
  wire Ch2_Q_out_lastAddr;  // ufix1
  reg  check4_done;  // ufix1
  wire Ch2_I_Out_done;  // ufix1
  wire Ch2_I_Out_done_enb;  // ufix1
  wire Ch2_I_Out_lastAddr;  // ufix1
  reg  check3_done;  // ufix1
  wire Ch1_Q_Out_done;  // ufix1
  wire Ch1_Q_Out_done_enb;  // ufix1
  wire Ch1_Q_Out_lastAddr;  // ufix1
  reg  check2_done;  // ufix1
  wire Ch1_I_Out_done;  // ufix1
  wire Ch1_I_Out_done_enb;  // ufix1
  wire Ch1_I_Out_active;  // ufix1
  reg [9:0] Hydrophone_processing_boundary_DTC_out1_addr;  // ufix10
  wire [9:0] Hydrophone_processing_boundary_DTC1_out1_addr_delay_1;  // ufix10
  reg  tb_enb_delay;
  wire phase_64_valid;
  reg signed [31:0] fp_I_Carrier;  // sfix32
  reg signed [17:0] rawData_I_Carrier;  // sfix18_En16
  reg signed [31:0] status_I_Carrier;  // sfix32
  reg signed [17:0] holdData_I_Carrier;  // sfix18_En16
  reg signed [17:0] I_Carrier_offset;  // sfix18_En16
  wire signed [17:0] I_Carrier;  // sfix18_En16
  wire Hydrophone_processing_boundary_DTC_out1_active;  // ufix1
  wire phase_64;
  wire Hydrophone_processing_boundary_DTC_out1_enb;  // ufix1
  wire [9:0] Hydrophone_processing_boundary_DTC2_out1_addr_delay_1;  // ufix10
  reg signed [31:0] fp_Q_Carrier;  // sfix32
  reg signed [17:0] rawData_Q_Carrier;  // sfix18_En16
  reg signed [31:0] status_Q_Carrier;  // sfix32
  reg signed [17:0] holdData_Q_Carrier;  // sfix18_En16
  reg signed [17:0] Q_Carrier_offset;  // sfix18_En16
  wire signed [17:0] Q_Carrier;  // sfix18_En16
  reg [8:0] counter;  // ufix9
  wire phase_64_all;
  reg [15:0] holdData_Threshold;  // ufix16_En16
  reg [15:0] Threshold_offset;  // ufix16_En16
  wire [15:0] Threshold_1;  // ufix16_En16
  reg [15:0] Hydrophone_processing_boundary_DTC6_out1_addr;  // ufix16
  wire [15:0] Hydrophone_processing_boundary_DTC3_out1_addr_delay_1;  // ufix16
  reg signed [31:0] fp_ADC4_In;  // sfix32
  reg signed [17:0] rawData_ADC4_In;  // sfix18_En17
  reg signed [31:0] status_ADC4_In;  // sfix32
  reg signed [17:0] holdData_ADC4_In;  // sfix18_En17
  reg signed [17:0] ADC4_In_offset;  // sfix18_En17
  wire signed [17:0] ADC4_In;  // sfix18_En17
  wire [15:0] Hydrophone_processing_boundary_DTC4_out1_addr_delay_1;  // ufix16
  reg signed [31:0] fp_ADC3_In;  // sfix32
  reg signed [17:0] rawData_ADC3_In;  // sfix18_En17
  reg signed [31:0] status_ADC3_In;  // sfix32
  reg signed [17:0] holdData_ADC3_In;  // sfix18_En17
  reg signed [17:0] ADC3_In_offset;  // sfix18_En17
  wire signed [17:0] ADC3_In;  // sfix18_En17
  wire [15:0] Hydrophone_processing_boundary_DTC5_out1_addr_delay_1;  // ufix16
  reg signed [31:0] fp_ADC2_In;  // sfix32
  reg signed [17:0] rawData_ADC2_In;  // sfix18_En17
  reg signed [31:0] status_ADC2_In;  // sfix32
  reg signed [17:0] holdData_ADC2_In;  // sfix18_En17
  reg signed [17:0] ADC2_In_offset;  // sfix18_En17
  wire signed [17:0] ADC2_In;  // sfix18_En17
  wire Hydrophone_processing_boundary_DTC6_out1_active;  // ufix1
  wire Hydrophone_processing_boundary_DTC6_out1_enb;  // ufix1
  wire [15:0] Hydrophone_processing_boundary_DTC6_out1_addr_delay_1;  // ufix16
  reg signed [31:0] fp_ADC1_In;  // sfix32
  reg signed [17:0] rawData_ADC1_In;  // sfix18_En17
  reg signed [31:0] status_ADC1_In;  // sfix32
  reg signed [17:0] holdData_ADC1_In;  // sfix18_En17
  reg signed [17:0] ADC1_In_offset;  // sfix18_En17
  wire signed [17:0] ADC1_In;  // sfix18_En17
  wire snkDone;
  wire snkDonen;
  wire tb_enb;
  wire notDone;
  wire signed [15:0] Ch1_I_Out;  // sfix16_En15
  wire signed [15:0] Ch1_Q_Out;  // sfix16_En15
  wire signed [15:0] Ch2_I_Out;  // sfix16_En15
  wire signed [15:0] Ch2_Q_out;  // sfix16_En15
  wire signed [15:0] Ch3_I_Out;  // sfix16_En15
  wire signed [15:0] Ch3_Q_Out;  // sfix16_En15
  wire signed [15:0] Ch4_I_Out;  // sfix16_En15
  wire signed [15:0] Ch4_Q_Out;  // sfix16_En15
  wire [7:0] Trigged;  // uint8
  wire Ch1_I_Out_enb;  // ufix1
  wire Ch1_I_Out_lastAddr;  // ufix1
  reg  check1_done;  // ufix1
  wire [7:0] Ch1_I_Out_addr_delay_1;  // ufix8
  reg signed [31:0] fp_Ch1_I_Out_expected;  // sfix32
  reg signed [15:0] Ch1_I_Out_expected;  // sfix16_En15
  reg signed [31:0] status_Ch1_I_Out_expected;  // sfix32
  reg signed [15:0] Ch1_I_Out_ref_hold;  // sfix16_En15
  wire signed [15:0] Ch1_I_Out_refTmp;  // sfix16_En15
  wire signed [15:0] Ch1_I_Out_ref;  // sfix16_En15
  reg  Ch1_I_Out_testFailure;  // ufix1
  wire [7:0] Ch1_Q_Out_addr_delay_1;  // ufix8
  reg signed [31:0] fp_Ch1_Q_Out_expected;  // sfix32
  reg signed [15:0] Ch1_Q_Out_expected;  // sfix16_En15
  reg signed [31:0] status_Ch1_Q_Out_expected;  // sfix32
  reg signed [15:0] Ch1_Q_Out_ref_hold;  // sfix16_En15
  wire signed [15:0] Ch1_Q_Out_refTmp;  // sfix16_En15
  wire signed [15:0] Ch1_Q_Out_ref;  // sfix16_En15
  reg  Ch1_Q_Out_testFailure;  // ufix1
  wire [7:0] Ch2_I_Out_addr_delay_1;  // ufix8
  reg signed [31:0] fp_Ch2_I_Out_expected;  // sfix32
  reg signed [15:0] Ch2_I_Out_expected;  // sfix16_En15
  reg signed [31:0] status_Ch2_I_Out_expected;  // sfix32
  reg signed [15:0] Ch2_I_Out_ref_hold;  // sfix16_En15
  wire signed [15:0] Ch2_I_Out_refTmp;  // sfix16_En15
  wire signed [15:0] Ch2_I_Out_ref;  // sfix16_En15
  reg  Ch2_I_Out_testFailure;  // ufix1
  wire [7:0] Ch2_Q_out_addr_delay_1;  // ufix8
  reg signed [31:0] fp_Ch2_Q_out_expected;  // sfix32
  reg signed [15:0] Ch2_Q_out_expected;  // sfix16_En15
  reg signed [31:0] status_Ch2_Q_out_expected;  // sfix32
  reg signed [15:0] Ch2_Q_out_ref_hold;  // sfix16_En15
  wire signed [15:0] Ch2_Q_out_refTmp;  // sfix16_En15
  wire signed [15:0] Ch2_Q_out_ref;  // sfix16_En15
  reg  Ch2_Q_out_testFailure;  // ufix1
  wire [7:0] Ch3_I_Out_addr_delay_1;  // ufix8
  reg signed [31:0] fp_Ch3_I_Out_expected;  // sfix32
  reg signed [15:0] Ch3_I_Out_expected;  // sfix16_En15
  reg signed [31:0] status_Ch3_I_Out_expected;  // sfix32
  reg signed [15:0] Ch3_I_Out_ref_hold;  // sfix16_En15
  wire signed [15:0] Ch3_I_Out_refTmp;  // sfix16_En15
  wire signed [15:0] Ch3_I_Out_ref;  // sfix16_En15
  reg  Ch3_I_Out_testFailure;  // ufix1
  wire [7:0] Ch3_Q_Out_addr_delay_1;  // ufix8
  reg signed [31:0] fp_Ch3_Q_Out_expected;  // sfix32
  reg signed [15:0] Ch3_Q_Out_expected;  // sfix16_En15
  reg signed [31:0] status_Ch3_Q_Out_expected;  // sfix32
  reg signed [15:0] Ch3_Q_Out_ref_hold;  // sfix16_En15
  wire signed [15:0] Ch3_Q_Out_refTmp;  // sfix16_En15
  wire signed [15:0] Ch3_Q_Out_ref;  // sfix16_En15
  reg  Ch3_Q_Out_testFailure;  // ufix1
  wire [7:0] Ch4_I_Out_addr_delay_1;  // ufix8
  reg signed [31:0] fp_Ch4_I_Out_expected;  // sfix32
  reg signed [15:0] Ch4_I_Out_expected;  // sfix16_En15
  reg signed [31:0] status_Ch4_I_Out_expected;  // sfix32
  reg signed [15:0] Ch4_I_Out_ref_hold;  // sfix16_En15
  wire signed [15:0] Ch4_I_Out_refTmp;  // sfix16_En15
  wire signed [15:0] Ch4_I_Out_ref;  // sfix16_En15
  reg  Ch4_I_Out_testFailure;  // ufix1
  wire [7:0] Ch4_Q_Out_addr_delay_1;  // ufix8
  reg signed [31:0] fp_Ch4_Q_Out_expected;  // sfix32
  reg signed [15:0] Ch4_Q_Out_expected;  // sfix16_En15
  reg signed [31:0] status_Ch4_Q_Out_expected;  // sfix32
  reg signed [15:0] Ch4_Q_Out_ref_hold;  // sfix16_En15
  wire signed [15:0] Ch4_Q_Out_refTmp;  // sfix16_En15
  wire signed [15:0] Ch4_Q_Out_ref;  // sfix16_En15
  reg  Ch4_Q_Out_testFailure;  // ufix1
  wire [9:0] Trigged_addr_delay_1;  // ufix10
  reg signed [31:0] fp_Trigged_expected;  // sfix32
  reg [7:0] Trigged_expected;  // uint8
  reg signed [31:0] status_Trigged_expected;  // sfix32
  reg [7:0] Trigged_ref_hold;  // uint8
  wire [7:0] Trigged_refTmp;  // uint8
  wire [7:0] Trigged_ref;  // uint8
  reg  Trigged_testFailure;  // ufix1
  wire testFailure;  // ufix1


  // Data source for Threshold
  assign rawData_Threshold = 16'b1000000000000000;



  assign Trigged_done_enb = Trigged_done & ce_out_1;



  assign Trigged_active = Trigged_addr != 10'b1111101000;



  assign Trigged_enb = ce_out_1 & Trigged_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 1000
  always @(posedge clk)
    begin : c_process
      if (reset == 1'b1) begin
        Trigged_addr <= 10'b0000000000;
      end
      else begin
        if (Trigged_enb) begin
          if (Trigged_addr >= 10'b1111101000) begin
            Trigged_addr <= 10'b0000000000;
          end
          else begin
            Trigged_addr <= Trigged_addr + 10'b0000000001;
          end
        end
      end
    end



  assign Trigged_lastAddr = Trigged_addr >= 10'b1111101000;



  assign Trigged_done = Trigged_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_9
      if (reset) begin
        check9_done <= 0;
      end
      else begin
        if (Trigged_done_enb) begin
          check9_done <= Trigged_done;
        end
      end
    end

  assign Ch4_Q_Out_done_enb = Ch4_Q_Out_done & ce_out_0;



  assign Ch4_Q_Out_lastAddr = Ch1_I_Out_addr >= 8'b11001000;



  assign Ch4_Q_Out_done = Ch4_Q_Out_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_8
      if (reset) begin
        check8_done <= 0;
      end
      else begin
        if (Ch4_Q_Out_done_enb) begin
          check8_done <= Ch4_Q_Out_done;
        end
      end
    end

  assign Ch4_I_Out_done_enb = Ch4_I_Out_done & ce_out_0;



  assign Ch4_I_Out_lastAddr = Ch1_I_Out_addr >= 8'b11001000;



  assign Ch4_I_Out_done = Ch4_I_Out_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_7
      if (reset) begin
        check7_done <= 0;
      end
      else begin
        if (Ch4_I_Out_done_enb) begin
          check7_done <= Ch4_I_Out_done;
        end
      end
    end

  assign Ch3_Q_Out_done_enb = Ch3_Q_Out_done & ce_out_0;



  assign Ch3_Q_Out_lastAddr = Ch1_I_Out_addr >= 8'b11001000;



  assign Ch3_Q_Out_done = Ch3_Q_Out_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_6
      if (reset) begin
        check6_done <= 0;
      end
      else begin
        if (Ch3_Q_Out_done_enb) begin
          check6_done <= Ch3_Q_Out_done;
        end
      end
    end

  assign Ch3_I_Out_done_enb = Ch3_I_Out_done & ce_out_0;



  assign Ch3_I_Out_lastAddr = Ch1_I_Out_addr >= 8'b11001000;



  assign Ch3_I_Out_done = Ch3_I_Out_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_5
      if (reset) begin
        check5_done <= 0;
      end
      else begin
        if (Ch3_I_Out_done_enb) begin
          check5_done <= Ch3_I_Out_done;
        end
      end
    end

  assign Ch2_Q_out_done_enb = Ch2_Q_out_done & ce_out_0;



  assign Ch2_Q_out_lastAddr = Ch1_I_Out_addr >= 8'b11001000;



  assign Ch2_Q_out_done = Ch2_Q_out_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_4
      if (reset) begin
        check4_done <= 0;
      end
      else begin
        if (Ch2_Q_out_done_enb) begin
          check4_done <= Ch2_Q_out_done;
        end
      end
    end

  assign Ch2_I_Out_done_enb = Ch2_I_Out_done & ce_out_0;



  assign Ch2_I_Out_lastAddr = Ch1_I_Out_addr >= 8'b11001000;



  assign Ch2_I_Out_done = Ch2_I_Out_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_3
      if (reset) begin
        check3_done <= 0;
      end
      else begin
        if (Ch2_I_Out_done_enb) begin
          check3_done <= Ch2_I_Out_done;
        end
      end
    end

  assign Ch1_Q_Out_done_enb = Ch1_Q_Out_done & ce_out_0;



  assign Ch1_Q_Out_lastAddr = Ch1_I_Out_addr >= 8'b11001000;



  assign Ch1_Q_Out_done = Ch1_Q_Out_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_2
      if (reset) begin
        check2_done <= 0;
      end
      else begin
        if (Ch1_Q_Out_done_enb) begin
          check2_done <= Ch1_Q_Out_done;
        end
      end
    end

  assign Ch1_I_Out_done_enb = Ch1_I_Out_done & ce_out_0;



  assign Ch1_I_Out_active = Ch1_I_Out_addr != 8'b11001000;



  assign #1 Hydrophone_processing_boundary_DTC1_out1_addr_delay_1 = Hydrophone_processing_boundary_DTC_out1_addr;

  // Data source for I_Carrier
  initial
    begin : I_Carrier_fileread
      fp_I_Carrier = $fopen("I_Carrier.dat", "r");
      status_I_Carrier = $rewind(fp_I_Carrier);
    end

  always @(Hydrophone_processing_boundary_DTC1_out1_addr_delay_1, phase_64_valid, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_I_Carrier <= 18'bx;
      end
      else if (phase_64_valid == 1) begin
        status_I_Carrier = $fscanf(fp_I_Carrier, "%h", rawData_I_Carrier);
      end
    end

  // holdData reg for Hydrophone_processing_boundary_DTC1_out1
  always @(posedge clk)
    begin : stimuli_Hydrophone_processing_boundary_DTC1_out1
      if (reset) begin
        holdData_I_Carrier <= 18'bx;
      end
      else begin
        holdData_I_Carrier <= rawData_I_Carrier;
      end
    end

  always @(rawData_I_Carrier or phase_64_valid)
    begin : stimuli_Hydrophone_processing_boundary_DTC1_out1_1
      if (phase_64_valid == 1'b0) begin
        I_Carrier_offset <= holdData_I_Carrier;
      end
      else begin
        I_Carrier_offset <= rawData_I_Carrier;
      end
    end

  assign #2 I_Carrier = I_Carrier_offset;

  assign Hydrophone_processing_boundary_DTC_out1_active = Hydrophone_processing_boundary_DTC_out1_addr != 10'b1111101000;



  assign phase_64 = phase_64_valid;

  assign Hydrophone_processing_boundary_DTC_out1_enb = Hydrophone_processing_boundary_DTC_out1_active & (phase_64 & tb_enb_delay);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 1000
  always @(posedge clk)
    begin : Hydrophoneprocessing_boundary_DTC_process
      if (reset == 1'b1) begin
        Hydrophone_processing_boundary_DTC_out1_addr <= 10'b0000000000;
      end
      else begin
        if (Hydrophone_processing_boundary_DTC_out1_enb) begin
          if (Hydrophone_processing_boundary_DTC_out1_addr >= 10'b1111101000) begin
            Hydrophone_processing_boundary_DTC_out1_addr <= 10'b0000000000;
          end
          else begin
            Hydrophone_processing_boundary_DTC_out1_addr <= Hydrophone_processing_boundary_DTC_out1_addr + 10'b0000000001;
          end
        end
      end
    end



  assign #1 Hydrophone_processing_boundary_DTC2_out1_addr_delay_1 = Hydrophone_processing_boundary_DTC_out1_addr;

  // Data source for Q_Carrier
  initial
    begin : Q_Carrier_fileread
      fp_Q_Carrier = $fopen("Q_Carrier.dat", "r");
      status_Q_Carrier = $rewind(fp_Q_Carrier);
    end

  always @(Hydrophone_processing_boundary_DTC2_out1_addr_delay_1, phase_64_valid, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_Q_Carrier <= 18'bx;
      end
      else if (phase_64_valid == 1) begin
        status_Q_Carrier = $fscanf(fp_Q_Carrier, "%h", rawData_Q_Carrier);
      end
    end

  // holdData reg for Hydrophone_processing_boundary_DTC2_out1
  always @(posedge clk)
    begin : stimuli_Hydrophone_processing_boundary_DTC2_out1
      if (reset) begin
        holdData_Q_Carrier <= 18'bx;
      end
      else begin
        holdData_Q_Carrier <= rawData_Q_Carrier;
      end
    end

  always @(rawData_Q_Carrier or phase_64_valid)
    begin : stimuli_Hydrophone_processing_boundary_DTC2_out1_1
      if (phase_64_valid == 1'b0) begin
        Q_Carrier_offset <= holdData_Q_Carrier;
      end
      else begin
        Q_Carrier_offset <= rawData_Q_Carrier;
      end
    end

  assign #2 Q_Carrier = Q_Carrier_offset;

  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 319
  always @(posedge clk)
    begin : slow_clock_enable_process
      if (reset == 1'b1) begin
        counter <= 9'b000000001;
      end
      else begin
        if (tb_enb_delay) begin
          if (counter >= 9'b100111111) begin
            counter <= 9'b000000000;
          end
          else begin
            counter <= counter + 9'b000000001;
          end
        end
      end
    end



  assign phase_64_all = counter % 64 == 1;

  assign phase_64_valid = phase_64_all & tb_enb_delay;



  // holdData reg for Hydrophone_processing_boundary_DTC_out1
  always @(posedge clk)
    begin : stimuli_Hydrophone_processing_boundary_DTC_out1
      if (reset) begin
        holdData_Threshold <= 16'bx;
      end
      else begin
        holdData_Threshold <= rawData_Threshold;
      end
    end

  always @(rawData_Threshold or phase_64_valid)
    begin : stimuli_Hydrophone_processing_boundary_DTC_out1_1
      if (phase_64_valid == 1'b0) begin
        Threshold_offset <= holdData_Threshold;
      end
      else begin
        Threshold_offset <= rawData_Threshold;
      end
    end

  assign #2 Threshold_1 = Threshold_offset;

  assign #1 Hydrophone_processing_boundary_DTC3_out1_addr_delay_1 = Hydrophone_processing_boundary_DTC6_out1_addr;

  // Data source for ADC4_In
  initial
    begin : ADC4_In_fileread
      fp_ADC4_In = $fopen("ADC4_In.dat", "r");
      status_ADC4_In = $rewind(fp_ADC4_In);
    end

  always @(Hydrophone_processing_boundary_DTC3_out1_addr_delay_1, tb_enb_delay, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_ADC4_In <= 18'bx;
      end
      else if (tb_enb_delay == 1) begin
        status_ADC4_In = $fscanf(fp_ADC4_In, "%h", rawData_ADC4_In);
      end
    end

  // holdData reg for Hydrophone_processing_boundary_DTC3_out1
  always @(posedge clk)
    begin : stimuli_Hydrophone_processing_boundary_DTC3_out1
      if (reset) begin
        holdData_ADC4_In <= 18'bx;
      end
      else begin
        holdData_ADC4_In <= rawData_ADC4_In;
      end
    end

  always @(rawData_ADC4_In or tb_enb_delay)
    begin : stimuli_Hydrophone_processing_boundary_DTC3_out1_1
      if (tb_enb_delay == 1'b0) begin
        ADC4_In_offset <= holdData_ADC4_In;
      end
      else begin
        ADC4_In_offset <= rawData_ADC4_In;
      end
    end

  assign #2 ADC4_In = ADC4_In_offset;

  assign #1 Hydrophone_processing_boundary_DTC4_out1_addr_delay_1 = Hydrophone_processing_boundary_DTC6_out1_addr;

  // Data source for ADC3_In
  initial
    begin : ADC3_In_fileread
      fp_ADC3_In = $fopen("ADC3_In.dat", "r");
      status_ADC3_In = $rewind(fp_ADC3_In);
    end

  always @(Hydrophone_processing_boundary_DTC4_out1_addr_delay_1, tb_enb_delay, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_ADC3_In <= 18'bx;
      end
      else if (tb_enb_delay == 1) begin
        status_ADC3_In = $fscanf(fp_ADC3_In, "%h", rawData_ADC3_In);
      end
    end

  // holdData reg for Hydrophone_processing_boundary_DTC4_out1
  always @(posedge clk)
    begin : stimuli_Hydrophone_processing_boundary_DTC4_out1
      if (reset) begin
        holdData_ADC3_In <= 18'bx;
      end
      else begin
        holdData_ADC3_In <= rawData_ADC3_In;
      end
    end

  always @(rawData_ADC3_In or tb_enb_delay)
    begin : stimuli_Hydrophone_processing_boundary_DTC4_out1_1
      if (tb_enb_delay == 1'b0) begin
        ADC3_In_offset <= holdData_ADC3_In;
      end
      else begin
        ADC3_In_offset <= rawData_ADC3_In;
      end
    end

  assign #2 ADC3_In = ADC3_In_offset;

  assign #1 Hydrophone_processing_boundary_DTC5_out1_addr_delay_1 = Hydrophone_processing_boundary_DTC6_out1_addr;

  // Data source for ADC2_In
  initial
    begin : ADC2_In_fileread
      fp_ADC2_In = $fopen("ADC2_In.dat", "r");
      status_ADC2_In = $rewind(fp_ADC2_In);
    end

  always @(Hydrophone_processing_boundary_DTC5_out1_addr_delay_1, tb_enb_delay, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_ADC2_In <= 18'bx;
      end
      else if (tb_enb_delay == 1) begin
        status_ADC2_In = $fscanf(fp_ADC2_In, "%h", rawData_ADC2_In);
      end
    end

  // holdData reg for Hydrophone_processing_boundary_DTC5_out1
  always @(posedge clk)
    begin : stimuli_Hydrophone_processing_boundary_DTC5_out1
      if (reset) begin
        holdData_ADC2_In <= 18'bx;
      end
      else begin
        holdData_ADC2_In <= rawData_ADC2_In;
      end
    end

  always @(rawData_ADC2_In or tb_enb_delay)
    begin : stimuli_Hydrophone_processing_boundary_DTC5_out1_1
      if (tb_enb_delay == 1'b0) begin
        ADC2_In_offset <= holdData_ADC2_In;
      end
      else begin
        ADC2_In_offset <= rawData_ADC2_In;
      end
    end

  assign #2 ADC2_In = ADC2_In_offset;

  assign Hydrophone_processing_boundary_DTC6_out1_active = Hydrophone_processing_boundary_DTC6_out1_addr != 16'b1111101000000000;



  assign Hydrophone_processing_boundary_DTC6_out1_enb = Hydrophone_processing_boundary_DTC6_out1_active & (tb_enb_delay & tb_enb_delay);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 64000
  always @(posedge clk)
    begin : Hydrophoneprocessing_boundary_DTC6_process
      if (reset == 1'b1) begin
        Hydrophone_processing_boundary_DTC6_out1_addr <= 16'b0000000000000000;
      end
      else begin
        if (Hydrophone_processing_boundary_DTC6_out1_enb) begin
          if (Hydrophone_processing_boundary_DTC6_out1_addr >= 16'b1111101000000000) begin
            Hydrophone_processing_boundary_DTC6_out1_addr <= 16'b0000000000000000;
          end
          else begin
            Hydrophone_processing_boundary_DTC6_out1_addr <= Hydrophone_processing_boundary_DTC6_out1_addr + 16'b0000000000000001;
          end
        end
      end
    end



  assign #1 Hydrophone_processing_boundary_DTC6_out1_addr_delay_1 = Hydrophone_processing_boundary_DTC6_out1_addr;

  // Data source for ADC1_In
  initial
    begin : ADC1_In_fileread
      fp_ADC1_In = $fopen("ADC1_In.dat", "r");
      status_ADC1_In = $rewind(fp_ADC1_In);
    end

  always @(Hydrophone_processing_boundary_DTC6_out1_addr_delay_1, tb_enb_delay, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_ADC1_In <= 18'bx;
      end
      else if (tb_enb_delay == 1) begin
        status_ADC1_In = $fscanf(fp_ADC1_In, "%h", rawData_ADC1_In);
      end
    end

  // holdData reg for Hydrophone_processing_boundary_DTC6_out1
  always @(posedge clk)
    begin : stimuli_Hydrophone_processing_boundary_DTC6_out1
      if (reset) begin
        holdData_ADC1_In <= 18'bx;
      end
      else begin
        holdData_ADC1_In <= rawData_ADC1_In;
      end
    end

  always @(rawData_ADC1_In or tb_enb_delay)
    begin : stimuli_Hydrophone_processing_boundary_DTC6_out1_1
      if (tb_enb_delay == 1'b0) begin
        ADC1_In_offset <= holdData_ADC1_In;
      end
      else begin
        ADC1_In_offset <= rawData_ADC1_In;
      end
    end

  assign #2 ADC1_In = ADC1_In_offset;

  assign snkDonen =  ~ snkDone;



  assign resetn =  ~ reset;



  assign tb_enb = resetn & snkDonen;



  // Delay inside enable generation: register depth 1
  always @(posedge clk)
    begin : u_enable_delay
      if (reset) begin
        tb_enb_delay <= 0;
      end
      else begin
        tb_enb_delay <= tb_enb;
      end
    end

  assign notDone = tb_enb_delay & snkDonen;



  assign #2 clk_enable = notDone;

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (snkDone == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  Hydrophone_processing u_Hydrophone_processing (.clk(clk),
                                                 .reset(reset),
                                                 .clk_enable(clk_enable),
                                                 .ADC1_In(ADC1_In),  // sfix18_En17
                                                 .ADC2_In(ADC2_In),  // sfix18_En17
                                                 .ADC3_In(ADC3_In),  // sfix18_En17
                                                 .ADC4_In(ADC4_In),  // sfix18_En17
                                                 .Threshold(Threshold_1),  // ufix16_En16
                                                 .Q_Carrier(Q_Carrier),  // sfix18_En16
                                                 .I_Carrier(I_Carrier),  // sfix18_En16
                                                 .ce_out_0(ce_out_0),
                                                 .ce_out_1(ce_out_1),
                                                 .Ch1_I_Out(Ch1_I_Out),  // sfix16_En15
                                                 .Ch1_Q_Out(Ch1_Q_Out),  // sfix16_En15
                                                 .Ch2_I_Out(Ch2_I_Out),  // sfix16_En15
                                                 .Ch2_Q_out(Ch2_Q_out),  // sfix16_En15
                                                 .Ch3_I_Out(Ch3_I_Out),  // sfix16_En15
                                                 .Ch3_Q_Out(Ch3_Q_Out),  // sfix16_En15
                                                 .Ch4_I_Out(Ch4_I_Out),  // sfix16_En15
                                                 .Ch4_Q_Out(Ch4_Q_Out),  // sfix16_En15
                                                 .Trigged(Trigged)  // uint8
                                                 );

  assign Ch1_I_Out_enb = ce_out_0 & Ch1_I_Out_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 200
  always @(posedge clk)
    begin : c_4_process
      if (reset == 1'b1) begin
        Ch1_I_Out_addr <= 8'b00000000;
      end
      else begin
        if (Ch1_I_Out_enb) begin
          if (Ch1_I_Out_addr >= 8'b11001000) begin
            Ch1_I_Out_addr <= 8'b00000000;
          end
          else begin
            Ch1_I_Out_addr <= Ch1_I_Out_addr + 8'b00000001;
          end
        end
      end
    end



  assign Ch1_I_Out_lastAddr = Ch1_I_Out_addr >= 8'b11001000;



  assign Ch1_I_Out_done = Ch1_I_Out_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_1
      if (reset) begin
        check1_done <= 0;
      end
      else begin
        if (Ch1_I_Out_done_enb) begin
          check1_done <= Ch1_I_Out_done;
        end
      end
    end

  assign snkDone = check9_done & (check8_done & (check7_done & (check6_done & (check5_done & (check4_done & (check3_done & (check1_done & check2_done)))))));



  assign #1 Ch1_I_Out_addr_delay_1 = Ch1_I_Out_addr;

  // Data source for Ch1_I_Out_expected
  initial
    begin : Ch1_I_Out_expected_fileread
      fp_Ch1_I_Out_expected = $fopen("Ch1_I_Out_expected.dat", "r");
      status_Ch1_I_Out_expected = $rewind(fp_Ch1_I_Out_expected);
    end

  always @(Ch1_I_Out_addr_delay_1,  tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        Ch1_I_Out_expected <= 16'bx;
      end
      else  begin
        status_Ch1_I_Out_expected = $fscanf(fp_Ch1_I_Out_expected, "%h", Ch1_I_Out_expected);
      end
    end

  // Bypass register to hold Ch1_I_Out_ref
  always @(posedge clk)
    begin : DataHold_Ch1_I_Out_ref
      if (reset) begin
        Ch1_I_Out_ref_hold <= 0;
      end
      else begin
        if (ce_out_0) begin
          Ch1_I_Out_ref_hold <= Ch1_I_Out_expected;
        end
      end
    end

  assign Ch1_I_Out_refTmp = Ch1_I_Out_expected;

  assign Ch1_I_Out_ref = (ce_out_0 == 1'b0 ? Ch1_I_Out_ref_hold :
              Ch1_I_Out_refTmp);



  always @(posedge clk)
    begin : Ch1_I_Out_checker
      if (reset == 1'b1) begin
        Ch1_I_Out_testFailure <= 1'b0;
      end
      else begin
        if (ce_out_0 == 1'b1 && Ch1_I_Out !== Ch1_I_Out_ref) begin
          Ch1_I_Out_testFailure <= 1'b1;
          $display("ERROR in Ch1_I_Out at time %t : Expected '%h' Actual '%h'", $time, Ch1_I_Out_ref, Ch1_I_Out);
        end
      end
    end

  assign #1 Ch1_Q_Out_addr_delay_1 = Ch1_I_Out_addr;

  // Data source for Ch1_Q_Out_expected
  initial
    begin : Ch1_Q_Out_expected_fileread
      fp_Ch1_Q_Out_expected = $fopen("Ch1_Q_Out_expected.dat", "r");
      status_Ch1_Q_Out_expected = $rewind(fp_Ch1_Q_Out_expected);
    end

  always @(Ch1_Q_Out_addr_delay_1,  tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        Ch1_Q_Out_expected <= 16'bx;
      end
      else  begin
        status_Ch1_Q_Out_expected = $fscanf(fp_Ch1_Q_Out_expected, "%h", Ch1_Q_Out_expected);
      end
    end

  // Bypass register to hold Ch1_Q_Out_ref
  always @(posedge clk)
    begin : DataHold_Ch1_Q_Out_ref
      if (reset) begin
        Ch1_Q_Out_ref_hold <= 0;
      end
      else begin
        if (ce_out_0) begin
          Ch1_Q_Out_ref_hold <= Ch1_Q_Out_expected;
        end
      end
    end

  assign Ch1_Q_Out_refTmp = Ch1_Q_Out_expected;

  assign Ch1_Q_Out_ref = (ce_out_0 == 1'b0 ? Ch1_Q_Out_ref_hold :
              Ch1_Q_Out_refTmp);



  always @(posedge clk)
    begin : Ch1_Q_Out_checker
      if (reset == 1'b1) begin
        Ch1_Q_Out_testFailure <= 1'b0;
      end
      else begin
        if (ce_out_0 == 1'b1 && Ch1_Q_Out !== Ch1_Q_Out_ref) begin
          Ch1_Q_Out_testFailure <= 1'b1;
          $display("ERROR in Ch1_Q_Out at time %t : Expected '%h' Actual '%h'", $time, Ch1_Q_Out_ref, Ch1_Q_Out);
        end
      end
    end

  assign #1 Ch2_I_Out_addr_delay_1 = Ch1_I_Out_addr;

  // Data source for Ch2_I_Out_expected
  initial
    begin : Ch2_I_Out_expected_fileread
      fp_Ch2_I_Out_expected = $fopen("Ch2_I_Out_expected.dat", "r");
      status_Ch2_I_Out_expected = $rewind(fp_Ch2_I_Out_expected);
    end

  always @(Ch2_I_Out_addr_delay_1,  tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        Ch2_I_Out_expected <= 16'bx;
      end
      else  begin
        status_Ch2_I_Out_expected = $fscanf(fp_Ch2_I_Out_expected, "%h", Ch2_I_Out_expected);
      end
    end

  // Bypass register to hold Ch2_I_Out_ref
  always @(posedge clk)
    begin : DataHold_Ch2_I_Out_ref
      if (reset) begin
        Ch2_I_Out_ref_hold <= 0;
      end
      else begin
        if (ce_out_0) begin
          Ch2_I_Out_ref_hold <= Ch2_I_Out_expected;
        end
      end
    end

  assign Ch2_I_Out_refTmp = Ch2_I_Out_expected;

  assign Ch2_I_Out_ref = (ce_out_0 == 1'b0 ? Ch2_I_Out_ref_hold :
              Ch2_I_Out_refTmp);



  always @(posedge clk)
    begin : Ch2_I_Out_checker
      if (reset == 1'b1) begin
        Ch2_I_Out_testFailure <= 1'b0;
      end
      else begin
        if (ce_out_0 == 1'b1 && Ch2_I_Out !== Ch2_I_Out_ref) begin
          Ch2_I_Out_testFailure <= 1'b1;
          $display("ERROR in Ch2_I_Out at time %t : Expected '%h' Actual '%h'", $time, Ch2_I_Out_ref, Ch2_I_Out);
        end
      end
    end

  assign #1 Ch2_Q_out_addr_delay_1 = Ch1_I_Out_addr;

  // Data source for Ch2_Q_out_expected
  initial
    begin : Ch2_Q_out_expected_fileread
      fp_Ch2_Q_out_expected = $fopen("Ch2_Q_out_expected.dat", "r");
      status_Ch2_Q_out_expected = $rewind(fp_Ch2_Q_out_expected);
    end

  always @(Ch2_Q_out_addr_delay_1,  tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        Ch2_Q_out_expected <= 16'bx;
      end
      else  begin
        status_Ch2_Q_out_expected = $fscanf(fp_Ch2_Q_out_expected, "%h", Ch2_Q_out_expected);
      end
    end

  // Bypass register to hold Ch2_Q_out_ref
  always @(posedge clk)
    begin : DataHold_Ch2_Q_out_ref
      if (reset) begin
        Ch2_Q_out_ref_hold <= 0;
      end
      else begin
        if (ce_out_0) begin
          Ch2_Q_out_ref_hold <= Ch2_Q_out_expected;
        end
      end
    end

  assign Ch2_Q_out_refTmp = Ch2_Q_out_expected;

  assign Ch2_Q_out_ref = (ce_out_0 == 1'b0 ? Ch2_Q_out_ref_hold :
              Ch2_Q_out_refTmp);



  always @(posedge clk)
    begin : Ch2_Q_out_checker
      if (reset == 1'b1) begin
        Ch2_Q_out_testFailure <= 1'b0;
      end
      else begin
        if (ce_out_0 == 1'b1 && Ch2_Q_out !== Ch2_Q_out_ref) begin
          Ch2_Q_out_testFailure <= 1'b1;
          $display("ERROR in Ch2_Q_out at time %t : Expected '%h' Actual '%h'", $time, Ch2_Q_out_ref, Ch2_Q_out);
        end
      end
    end

  assign #1 Ch3_I_Out_addr_delay_1 = Ch1_I_Out_addr;

  // Data source for Ch3_I_Out_expected
  initial
    begin : Ch3_I_Out_expected_fileread
      fp_Ch3_I_Out_expected = $fopen("Ch3_I_Out_expected.dat", "r");
      status_Ch3_I_Out_expected = $rewind(fp_Ch3_I_Out_expected);
    end

  always @(Ch3_I_Out_addr_delay_1,  tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        Ch3_I_Out_expected <= 16'bx;
      end
      else  begin
        status_Ch3_I_Out_expected = $fscanf(fp_Ch3_I_Out_expected, "%h", Ch3_I_Out_expected);
      end
    end

  // Bypass register to hold Ch3_I_Out_ref
  always @(posedge clk)
    begin : DataHold_Ch3_I_Out_ref
      if (reset) begin
        Ch3_I_Out_ref_hold <= 0;
      end
      else begin
        if (ce_out_0) begin
          Ch3_I_Out_ref_hold <= Ch3_I_Out_expected;
        end
      end
    end

  assign Ch3_I_Out_refTmp = Ch3_I_Out_expected;

  assign Ch3_I_Out_ref = (ce_out_0 == 1'b0 ? Ch3_I_Out_ref_hold :
              Ch3_I_Out_refTmp);



  always @(posedge clk)
    begin : Ch3_I_Out_checker
      if (reset == 1'b1) begin
        Ch3_I_Out_testFailure <= 1'b0;
      end
      else begin
        if (ce_out_0 == 1'b1 && Ch3_I_Out !== Ch3_I_Out_ref) begin
          Ch3_I_Out_testFailure <= 1'b1;
          $display("ERROR in Ch3_I_Out at time %t : Expected '%h' Actual '%h'", $time, Ch3_I_Out_ref, Ch3_I_Out);
        end
      end
    end

  assign #1 Ch3_Q_Out_addr_delay_1 = Ch1_I_Out_addr;

  // Data source for Ch3_Q_Out_expected
  initial
    begin : Ch3_Q_Out_expected_fileread
      fp_Ch3_Q_Out_expected = $fopen("Ch3_Q_Out_expected.dat", "r");
      status_Ch3_Q_Out_expected = $rewind(fp_Ch3_Q_Out_expected);
    end

  always @(Ch3_Q_Out_addr_delay_1,  tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        Ch3_Q_Out_expected <= 16'bx;
      end
      else  begin
        status_Ch3_Q_Out_expected = $fscanf(fp_Ch3_Q_Out_expected, "%h", Ch3_Q_Out_expected);
      end
    end

  // Bypass register to hold Ch3_Q_Out_ref
  always @(posedge clk)
    begin : DataHold_Ch3_Q_Out_ref
      if (reset) begin
        Ch3_Q_Out_ref_hold <= 0;
      end
      else begin
        if (ce_out_0) begin
          Ch3_Q_Out_ref_hold <= Ch3_Q_Out_expected;
        end
      end
    end

  assign Ch3_Q_Out_refTmp = Ch3_Q_Out_expected;

  assign Ch3_Q_Out_ref = (ce_out_0 == 1'b0 ? Ch3_Q_Out_ref_hold :
              Ch3_Q_Out_refTmp);



  always @(posedge clk)
    begin : Ch3_Q_Out_checker
      if (reset == 1'b1) begin
        Ch3_Q_Out_testFailure <= 1'b0;
      end
      else begin
        if (ce_out_0 == 1'b1 && Ch3_Q_Out !== Ch3_Q_Out_ref) begin
          Ch3_Q_Out_testFailure <= 1'b1;
          $display("ERROR in Ch3_Q_Out at time %t : Expected '%h' Actual '%h'", $time, Ch3_Q_Out_ref, Ch3_Q_Out);
        end
      end
    end

  assign #1 Ch4_I_Out_addr_delay_1 = Ch1_I_Out_addr;

  // Data source for Ch4_I_Out_expected
  initial
    begin : Ch4_I_Out_expected_fileread
      fp_Ch4_I_Out_expected = $fopen("Ch4_I_Out_expected.dat", "r");
      status_Ch4_I_Out_expected = $rewind(fp_Ch4_I_Out_expected);
    end

  always @(Ch4_I_Out_addr_delay_1,  tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        Ch4_I_Out_expected <= 16'bx;
      end
      else  begin
        status_Ch4_I_Out_expected = $fscanf(fp_Ch4_I_Out_expected, "%h", Ch4_I_Out_expected);
      end
    end

  // Bypass register to hold Ch4_I_Out_ref
  always @(posedge clk)
    begin : DataHold_Ch4_I_Out_ref
      if (reset) begin
        Ch4_I_Out_ref_hold <= 0;
      end
      else begin
        if (ce_out_0) begin
          Ch4_I_Out_ref_hold <= Ch4_I_Out_expected;
        end
      end
    end

  assign Ch4_I_Out_refTmp = Ch4_I_Out_expected;

  assign Ch4_I_Out_ref = (ce_out_0 == 1'b0 ? Ch4_I_Out_ref_hold :
              Ch4_I_Out_refTmp);



  always @(posedge clk)
    begin : Ch4_I_Out_checker
      if (reset == 1'b1) begin
        Ch4_I_Out_testFailure <= 1'b0;
      end
      else begin
        if (ce_out_0 == 1'b1 && Ch4_I_Out !== Ch4_I_Out_ref) begin
          Ch4_I_Out_testFailure <= 1'b1;
          $display("ERROR in Ch4_I_Out at time %t : Expected '%h' Actual '%h'", $time, Ch4_I_Out_ref, Ch4_I_Out);
        end
      end
    end

  assign #1 Ch4_Q_Out_addr_delay_1 = Ch1_I_Out_addr;

  // Data source for Ch4_Q_Out_expected
  initial
    begin : Ch4_Q_Out_expected_fileread
      fp_Ch4_Q_Out_expected = $fopen("Ch4_Q_Out_expected.dat", "r");
      status_Ch4_Q_Out_expected = $rewind(fp_Ch4_Q_Out_expected);
    end

  always @(Ch4_Q_Out_addr_delay_1,  tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        Ch4_Q_Out_expected <= 16'bx;
      end
      else  begin
        status_Ch4_Q_Out_expected = $fscanf(fp_Ch4_Q_Out_expected, "%h", Ch4_Q_Out_expected);
      end
    end

  // Bypass register to hold Ch4_Q_Out_ref
  always @(posedge clk)
    begin : DataHold_Ch4_Q_Out_ref
      if (reset) begin
        Ch4_Q_Out_ref_hold <= 0;
      end
      else begin
        if (ce_out_0) begin
          Ch4_Q_Out_ref_hold <= Ch4_Q_Out_expected;
        end
      end
    end

  assign Ch4_Q_Out_refTmp = Ch4_Q_Out_expected;

  assign Ch4_Q_Out_ref = (ce_out_0 == 1'b0 ? Ch4_Q_Out_ref_hold :
              Ch4_Q_Out_refTmp);



  always @(posedge clk)
    begin : Ch4_Q_Out_checker
      if (reset == 1'b1) begin
        Ch4_Q_Out_testFailure <= 1'b0;
      end
      else begin
        if (ce_out_0 == 1'b1 && Ch4_Q_Out !== Ch4_Q_Out_ref) begin
          Ch4_Q_Out_testFailure <= 1'b1;
          $display("ERROR in Ch4_Q_Out at time %t : Expected '%h' Actual '%h'", $time, Ch4_Q_Out_ref, Ch4_Q_Out);
        end
      end
    end

  assign #1 Trigged_addr_delay_1 = Trigged_addr;

  // Data source for Trigged_expected
  initial
    begin : Trigged_expected_fileread
      fp_Trigged_expected = $fopen("Trigged_expected.dat", "r");
      status_Trigged_expected = $rewind(fp_Trigged_expected);
    end

  always @(Trigged_addr_delay_1,  tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        Trigged_expected <= 8'bx;
      end
      else  begin
        status_Trigged_expected = $fscanf(fp_Trigged_expected, "%h", Trigged_expected);
      end
    end

  // Bypass register to hold Trigged_ref
  always @(posedge clk)
    begin : DataHold_Trigged_ref
      if (reset) begin
        Trigged_ref_hold <= 0;
      end
      else begin
        if (ce_out_1) begin
          Trigged_ref_hold <= Trigged_expected;
        end
      end
    end

  assign Trigged_refTmp = Trigged_expected;

  assign Trigged_ref = (ce_out_1 == 1'b0 ? Trigged_ref_hold :
              Trigged_refTmp);



  always @(posedge clk)
    begin : Trigged_checker
      if (reset == 1'b1) begin
        Trigged_testFailure <= 1'b0;
      end
      else begin
        if (ce_out_1 == 1'b1 && Trigged !== Trigged_ref) begin
          Trigged_testFailure <= 1'b1;
          $display("ERROR in Trigged at time %t : Expected '%h' Actual '%h'", $time, Trigged_ref, Trigged);
        end
      end
    end

  assign testFailure = Trigged_testFailure | (Ch4_Q_Out_testFailure | (Ch4_I_Out_testFailure | (Ch3_Q_Out_testFailure | (Ch3_I_Out_testFailure | (Ch2_Q_out_testFailure | (Ch2_I_Out_testFailure | (Ch1_I_Out_testFailure | Ch1_Q_Out_testFailure)))))));



  always @(posedge clk)
    begin : completed_msg
      if (snkDone == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // Hydrophone_processing_tb

