// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\zeabus_hydrophone_fixed_point\Hydrophone_processing_tc.v
// Created: 2020-04-16 11:11:01
// 
// Generated by MATLAB 9.7 and HDL Coder 3.15
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Hydrophone_processing_tc
// Source Path: Hydrophone processing_tc
// Hierarchy Level: 1
// 
// Master clock enable input: clk_enable
// 
// enb         : identical to clk_enable
// enb_1_64_0  : 64x slower than clk with last phase
// enb_1_64_1  : 64x slower than clk with phase 1
// enb_1_320_0 : 320x slower than clk with last phase
// enb_1_320_1 : 320x slower than clk with phase 1
// 
// -------------------------------------------------------------

`timescale 10 ns / 10 ns

module Hydrophone_processing_tc
          (clk,
           reset,
           clk_enable,
           enb,
           enb_1_64_0,
           enb_1_64_1,
           enb_1_320_0,
           enb_1_320_1);


  input   clk;
  input   reset;
  input   clk_enable;
  output  enb;
  output  enb_1_64_0;
  output  enb_1_64_1;
  output  enb_1_320_0;
  output  enb_1_320_1;


  reg [5:0] count64;  // ufix6
  reg  phase_0;
  wire phase_0_tmp;
  reg  phase_1;
  wire phase_1_tmp;
  reg [8:0] count320;  // ufix9
  wire phase_all;
  reg  phase_0_1;
  wire phase_0_tmp_1;
  reg  phase_1_1;
  wire phase_1_tmp_1;


  always @ (posedge clk)
    begin: Counter64
      if (reset == 1'b1) begin
        count64 <= 6'b000001;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (count64 >= 6'b111111) begin
            count64 <= 6'b000000;
          end
          else begin
            count64 <= count64 + 6'b000001;
          end
        end
      end
    end // Counter64

  always @ ( posedge clk)
    begin: temp_process1
      if (reset == 1'b1) begin
        phase_0 <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_0 <= phase_0_tmp;
        end
      end
    end // temp_process1

  assign  phase_0_tmp = (count64 == 6'b111111 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  always @ ( posedge clk)
    begin: temp_process2
      if (reset == 1'b1) begin
        phase_1 <= 1'b1;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_1 <= phase_1_tmp;
        end
      end
    end // temp_process2

  assign  phase_1_tmp = (count64 == 6'b000000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  always @ (posedge clk)
    begin: Counter320
      if (reset == 1'b1) begin
        count320 <= 9'b000000001;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (count320 >= 9'b100111111) begin
            count320 <= 9'b000000000;
          end
          else begin
            count320 <= count320 + 9'b000000001;
          end
        end
      end
    end // Counter320

  assign phase_all = clk_enable ? 1'b1 : 1'b0;

  always @ ( posedge clk)
    begin: temp_process3
      if (reset == 1'b1) begin
        phase_0_1 <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_0_1 <= phase_0_tmp_1;
        end
      end
    end // temp_process3

  assign  phase_0_tmp_1 = (count320 == 9'b100111111 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  always @ ( posedge clk)
    begin: temp_process4
      if (reset == 1'b1) begin
        phase_1_1 <= 1'b1;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_1_1 <= phase_1_tmp_1;
        end
      end
    end // temp_process4

  assign  phase_1_tmp_1 = (count320 == 9'b000000000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign enb =  phase_all & clk_enable;

  assign enb_1_64_0 =  phase_0 & clk_enable;

  assign enb_1_64_1 =  phase_1 & clk_enable;

  assign enb_1_320_0 =  phase_0_1 & clk_enable;

  assign enb_1_320_1 =  phase_1_1 & clk_enable;


endmodule  // Hydrophone_processing_tc

