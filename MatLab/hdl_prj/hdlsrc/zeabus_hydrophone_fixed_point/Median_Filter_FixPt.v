// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\zeabus_hydrophone_fixed_point\Median_Filter_FixPt.v
// Created: 2020-04-16 11:11:01
// 
// Generated by MATLAB 9.7 and HDL Coder 3.15
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Median_Filter_FixPt
// Source Path: zeabus_hydrophone_fixed_point/Hydrophone processing/ADC1 Interface/Median Filter/Median Filter_FixPt
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 10 ns / 10 ns

module Median_Filter_FixPt
          (clk,
           reset,
           enb,
           u,
           y);


  input   clk;
  input   reset;
  input   enb;
  input   signed [17:0] u;  // sfix18_En17
  output  signed [17:0] y;  // sfix18_En17


  reg signed [17:0] y_1;  // sfix18_En17
  reg signed [17:0] d [0:4];  // sfix18 [5]
  reg signed [17:0] d_next [0:4];  // sfix18_En17 [5]
  reg signed [17:0] t [0:4];  // sfix18_En17 [5]
  reg signed [17:0] varargin_2;  // sfix18_En17
  reg signed [17:0] varargin_2_0;  // sfix18_En17
  reg signed [17:0] varargin_2_1;  // sfix18_En17
  reg signed [17:0] varargin_2_2;  // sfix18_En17
  reg signed [17:0] varargin_2_3;  // sfix18_En17
  reg signed [17:0] d_temp [0:4];  // sfix18_En17 [5]
  reg signed [31:0] t_0;  // int32
  reg signed [31:0] t_1;  // int32
  reg signed [31:0] t_2;  // int32
  reg signed [31:0] t_3;  // int32
  reg signed [31:0] t_0_0;  // int32


  always @(posedge clk)
    begin : Median_Filter_FixPt_1_process
      if (reset == 1'b1) begin
        d[0] <= 18'sb000000000000000000;
        d[1] <= 18'sb000000000000000000;
        d[2] <= 18'sb000000000000000000;
        d[3] <= 18'sb000000000000000000;
        d[4] <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin

          for(t_0_0 = 32'sd0; t_0_0 <= 32'sd4; t_0_0 = t_0_0 + 32'sd1) begin
            d[t_0_0] <= d_next[t_0_0];
          end

        end
      end
    end

  always @* begin

    for(t_0 = 32'sd0; t_0 <= 32'sd4; t_0 = t_0 + 32'sd1) begin
      d_temp[t_0] = d[t_0];
    end

    //auto-generated
    // En-list new data

    for(t_1 = 32'sd0; t_1 <= 32'sd3; t_1 = t_1 + 32'sd1) begin
      d_temp[t_1] = d[32'sd1 + t_1];
    end

    d_temp[4] = u;
    // Dup the array for processing

    for(t_2 = 32'sd0; t_2 <= 32'sd4; t_2 = t_2 + 32'sd1) begin
      t[t_2] = d_temp[t_2];
    end

    // calculate median by bubble sorting with unrolled loops
    // pass1
    if (t[0] > t[1]) begin
      varargin_2 = t[1];
      t[1] = t[0];
      t[0] = varargin_2;
    end
    if (t[1] > t[2]) begin
      varargin_2_0 = t[2];
      t[2] = t[1];
      t[1] = varargin_2_0;
    end
    if (t[2] > t[3]) begin
      varargin_2_1 = t[3];
      t[3] = t[2];
      t[2] = varargin_2_1;
    end
    if (t[3] > t[4]) begin
      t[3] = t[4];
    end
    // pass2
    if (t[0] > t[1]) begin
      varargin_2_2 = t[1];
      t[1] = t[0];
      t[0] = varargin_2_2;
    end
    if (t[1] > t[2]) begin
      varargin_2_3 = t[2];
      t[2] = t[1];
      t[1] = varargin_2_3;
    end
    if (t[2] > t[3]) begin
      t[2] = t[3];
    end
    // pass3
    if (t[0] > t[1]) begin
      t[1] = t[0];
    end
    if (t[1] > t[2]) begin
      t[2] = t[1];
    end
    y_1 = t[2];

    for(t_3 = 32'sd0; t_3 <= 32'sd4; t_3 = t_3 + 32'sd1) begin
      d_next[t_3] = d_temp[t_3];
    end

  end



  assign y = y_1;

endmodule  // Median_Filter_FixPt

